48==> introduction to container orchestration and docker swarm ?
 
   - "a container orchestrator is a tool used to provison, schedule and manage containers at large scale over one or more clusters of multiple hosts.


                          -----------------swarm mode----------
                          |                                   |
			  |		--------->worker1     |
			  |		|                     |
			  |		|                     |
			  |		|                     |
		  service |	        |                     |
          user <-------------->manager<----------->worker2    |
			  |		|                     |
			  |		|                     |
			  |		|                     |
			  |		|   task              |
			  |		---------->worker3    |
                          -------------------------------------

    => manager:-
                               |----->API
                               |-----> Orchestrator
            manager ---------->|-----> Allocator
                               |-----> Dispatcher
                               |-----> Scheduler
       - just like docker compose we demand our actions in the form off a servie which manager translates into smaller tasks and provides them to workers to get handled.

        -API 	      :- it makes it capable off serving our service request and creating objects out of those services.
        -Orchestrator :- which passes task translated from services to workers.
        -Allocator    :- which allocates internal clusters ip's to the workers and manager itself.
        -Dispatcher   :- dispatcher will decides which node will serve which task and gives this information to the orchestrator.
        -Scheduler    :- the task provided by orchestrator are idle. they doc't run as soon as they get allocated.schedulers signals workers to run the task which they have received
                         and so it also decides which task will done first and which won't.
    => worker:-
       - they have two key components in total
         - worker :- worker which connects to the dispatcher off the master to check if it has any task to receive from the orchestrator.
         - executer :- executer which literally does what its name suggets, it executes the tasks which means it creates containers,volumes,networks and run them.
49==> can swarm handle failure ?
     - yes.
      : "to make sure that the swarm cluster functions properly, at least more than half of the nodes sholud be working".
      : working nodes for a happy swarm cluster is equal to the number off total nodes divided by two + one
         req.working nodes = N/2 + 1
           N = total number of nodes

50==> VirtualBox installation    
  hypervisor => it is a piece off software which allows us to create virtual machines.
  $ vi /etc/apt/sources.list
    deb https://download.virtualbox.org/virtualbox/debian xenial contrit
    :wq!
  $ wget -q https://www.virtualbox.org/download/oracle_vbox_2016.asc -0- | sudo apt-key add -
  $ sudo apt-get update
  $ sudo apt-get install virtualbox-5.2

51==> docker machine installation
  
$ base=https://gtihub.com/docker/machine/release/download/v0.14.0 &&
> curl -L $base/docker-machine-$(uname -s)-$(uname -m) >/tmp/docker-machine &&
> sudo install /tmp/docker-machine /usr/local/bin/docker-machine

$ docker-machine version

52==> Setting up the Swarm Cluster
   $ docker-machine create --driver virtualbox manager
   $ docker-machine create --driver virtualbox worker-1
   $ docker-machine create --driver virtualbox worker-2
   $ docker-machine ls
   $ docker-machine stop manager
   $ docker-machine ls
   $ docker-machine start manager
   $ docker-machine ip manager
   $ docker-machine ip worker-1
   $ docker-machine inspect manager
   $ docker-machine ssh manager - it navigate to manager node.

53==> Initialising Swarm Cluster

  $ docker swarm init --advertise-addr 192.168.99.100  :-let's initialize our swarm using docker swarm in it command and advertise its ip address.
  
  -now if you want to add workers to this manager note we can run docker swarm join command from respective 
   worker nodes along with the token which is generated from this manager node.
  -this token is a unique ID which can be used by other nodes to jon our manager as a part off its cluster.
  -In case we have lost this command or token,we can get it back by typing Docker swarm joined token worker 
   but this command will only work if the manager has been initialized with swarm mode.

54==> working with swarm nodes| list and inspect

=> in manager
  $ docker node ls
  $ docker node inspect --pretty self
  $ docker node inspect --pretty worker-1
  
55==> creating a service on swarm

=> in manager
  $ docker service create --name web-server -p 8080:80 --replicas 3 nginx:latest
  $ docker service ls
  $ docker service ps web-server
  $ docker ps -a
56==> Making a node leave your swarm
  $ docker node update --availability drain worker-2



  


