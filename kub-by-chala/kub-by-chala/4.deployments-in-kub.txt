
->imagine, you are upgrading app from v1 to v2 ?
->upgrade with zero downtime ?
->upgrade sequentially, one after the other ?
->pause and resume upgrade process ?
->rollback upgrade to previous stable release ?

----deployments----
=>what is deployment ?
-deployment is a controller just like any other controller such as replication controler & replicaSet
-deployment is all about updates & Rollbacks
-deployment controller provides a declarative updates for pods & replicaSets, 
 this updates are not only just changing the older version number inside the spec file to new version it also includes the increasing & decreasing number of pod replicas.

Features:
. multiple Replicas
. Upgrade
. Rollback
. Scale up or down
. pause and resume

Deployment Types:

.recreate:-
 -In this type of very simple deployment, all of the old pods are killed all at once and get replaced all at once with the new ones.

.RollingUpdate(Ramped or Incremental)
 -The rolling deployment is the standard default deployment to Kubernetes. 
  It works by slowly, one by one, replacing pods of the previous version of your application with pods of the new version without any cluster downtime.

.canary:-
-A canary is used for when you want to test some new functionality typically on the backend of your application. 
 Traditionally you may have had two almost identical servers: 
 one that goes to all users and another with the new features that gets rolled out to a subset of users and then compared.
 When no errors are reported, the new version can gradually roll out to the rest of the infrastructure.

.Blue/Green (or Red/Black) deployments:-
-In a blue/green deployment strategy (sometimes referred to as red/black) the old version of the application (green) and the new version (blue) get deployed at the same time.
 When both of these are deployed, users only have access to the green, whereas, the blue is available to your QA team for test automation on a separate service or via direct port-forwarding.

----Deployments - Manifest file----

# Deployment
#controllers/nginx-deploy.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: nginx-deploy
  labels:
    app: nginx-app
spec:
  replicas: 3
  selector:
    matchLabels:
      app: nginx-app
  template:
    metadata:
      labels:
        app: nginx-app
    spec:
      containers:
      - name: nginx-container
        image: nginx:1.7.9
        ports:
        - containerPort: 80

Deployments - Create & Display
-kubectl create -f nginx-deploy.yaml
-kubectl get deploy -l app=nginx-app
-kubectl get rs -l app=nginx-app
-kubectl get po -l app=nginx-app

Deployment - Describe
-kubectl describe deploy nginx-deployment

Deployments - Update Deployment
-kubectl set image deploy nginx-deployment nginx-container=nginx:1.9.1
-kubectl edit deploy nginx-deployment      #it's by editing deployment file
-kubectl rollout status deployment/nginx-deployment 
-kubectl get deploy

Deployment - Rollback Deployment
-kubectl set image deploy nginx-deployment nginx-container=nginx:1.91 --record
-kubectl rollout status deployment/nginx-deployment
-kubectl rollout history deployment/nginx-deployment
-kubectl rollout undo deployment/nginx-deployment
-kubectl rollout status deployment/nginx-deployment

---Scale up & down----

Deployments - Scaling up
-kubectl scale deployment nginx-deployment --replicas=5
-kubectl get deploy
-kubectl get po
Deployments - scaling down
-kubectl scale deployment nginx-deployment --replicas=3
-kubectl get po -l app=nginx-app

Deployment - Delete
-kubectl delete -f nginx-deploy.yaml
-kubectl get po -l app=nginx-app

