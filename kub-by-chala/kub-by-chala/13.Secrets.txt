

			"how do you manage sensitive data in kubernetes?"

=> Secrets ?
- Kubernetes Secrets let you store and manage sensitive information, such as passwords, OAuth tokens, and ssh keys. 
  Storing confidential information in a Secret is safer and more flexible than putting it verbatim in a Pod definition or in a container image.
- A Secret is an object that contains a small amount of sensitive data such as a password, a token, or a key. 
  Such information might otherwise be put in a Pod specification or in an image. Users can create Secrets and the system also creates some Secrets.

Overview
. Small amount of sensitive data
  . passwords, Tokens , or keys
. Reduces risk of exposing sensitive data
. created outside of pods & containers
. Secrets are Stored inside ETCD database on kubernetes Master
. Maximum that secret can be not more than 1MB
. once secrets are created how do you inject into pods there are two ways - Volumes or Env variables
. Sent only to the target nodes

creating secrets:- by using kubectl & manually

Using kubectl: syntax

- kubectl create secret [TYPE] [NAME] [DATA]
                        ______        ______
                           |             |
			   |		 |----->. path to dir/file:  --from-file
		           | 			. key-value pair  :  --from-literal
                        generic
                         . file
                         . directory
                         . literal value
                   	docker-registry
   			tls


Creating Secret: Kubectl
$ echo -n 'admin' > ./username.txt
$ echo -n '1f2d1e2e67df' > ./password.txt
$ kubectl create secret generic db-user-pass --from-file=./username.txt --from-file=./password.txt
$ kubectl get secrets
$ kubectl describe secrets db-user-pass

Creating Secret: Manually
$ echo -n 'admin' | base64
YWRtaW4=
$ echo -n '1f2d1e2e67df' | base64
MWYyZDF1MmU2N2Rm

# mysecret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: mysecret
type: Opaque
data:
  username: YWRtaW4=
  password: MWYyZDF1MmU2N2Rm

$ kubectl create -f mysecret.yaml

Decoding Secrets
$ kubectl get secrets mysecret -o yaml
$ echo 'YWRtaW4=' | base64 --decode
admin
$ echo 'MWYyZDF1MmU2N2Rm' | base64 --decode
1f2d1e2e67df

. Consuming Secrets in Pods
  there are two ways 
  . Volumes
  . Environmental Variables

Consuming "Secrets" from volume
# mysecret-pod.yaml
apiVersion: v1
kind: Pod
metadata:
  name: mypod
spec:
  containers: 
  - name: mypod
    image: redis
    volumeMounts:
    - name: foo
      mountPath: "/etc/foo"
      readOnly: true
  volumes:
  - name: foo
    secret:
      secretName: mysecret

$ kubectl create -f mysecret-pod.yaml
$ kubectl get po
$ kubectl exec mypod ls /etc/foo
$ kubectl exec mypod cat /etc/foo/passwd
$ kubectl exec mypod cat /etc/foo/username

Consuming "Secrets" from "Environment Variables"
# mysecret-env-pod.yaml
apiVersion: v1
kind: Pod
metadata: 
  name: secret-env-pod
spec:
  containers:
  - name: mycontainer
    image: redis
    env:
      - name: SECRET_USERNAME
        valueFrom:
          secretKeyRef:
            name: mysecret
            key: username
      - name: SECRET_PASSWORD
        valueFrom:
          secretKeyRef:
            name: mysecret
  	    key: password
  restartPolicy: Never

$ kubectl create -f mysecret-pod-env.yaml
$ kubectl get po
$ kubectl exec secret-env-pod env | grep SECRET