
-Imagine that, you need to deploy one full fledge app
-which consists of frontend application and backend database
-how can we restrict access of backend database to only within the kubernetes cluster?

1.Deploying 1 Redis DB Master

# redis-master-deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: redis-master
  labels:
    app: redis
spec:
  replicas: 1
  selector:
    matchLabels:
      app: redis
      role: master
      tier: backend
  template:
    metadata:
      labels:
        app: redis
        role: master
        tier: backend
    spec:
      contaniners:
      - name: master
        image: k8s.gcr.io/redis:e2e
        resources:
          requests:
            cpu: 100m
            memory: 100Mi
        ports:
        - containersPort: 6379

2. Deploying # Redis DB Slaves
# redis-slave.yaml
apiVersion: apps/v1 # for versions before 1.9.0 use apps/v1beta2
kind: Deployment
metadata: 
  name : redis-slave
  labels:
    app: redis
spec:
  replicas: 3
  selector:
    matchLabels:
      app: redis
      role: slave
      tier: backend
  template:
    metadata:
      labels:
        app: redis
        role: slave
        tier: backend
    spec:
      containers:
      - name: slave
        image: gcr.io/google_samples/gb-redisslave:v1
        resources:
          requests:
            cpu: 100m
            memory: 100Mi
        ports:
        - containersPort: 6379

3. deploying 2 front-end PHP web pods
# redis-master-deployment.yaml
apiVersion: apps/v1 # for versions before 1.9.0 use apps/vi
kind: Deployment
metadata: 
  name: frontend
  labels: 
    app: guestbook
spec:
  replicas: 2
  selector: 
    matchLabels:
      app: guestbook
      tier: frontend
  template:
    metadata:
      labels:
        app: guestbook
        tier: frontend
    spec:
      containers:
      - name: php-redis
        image: gcr.io/google-samples/gb-frontend:v4
        resources:
          requests:
            cpu: 100m
            memory: 100Mi
        ports:
        - containerPort: 80

4. Creating Service for Redis Master
# redis-master-service.yaml

apiVersion: v1
kind: Service
metadata:
  name: redis-master.svc
  labels:
    app: redis
    role: master
    tier: backend
spec:
  ports:
  - port: 6379
    targetPort: 6379
  type: ClusterIP
  selector:
    app: redis
    role: master
    tier: backend

5. Creating Service for Redis DB Slaves
# redis-master-deployment.yaml

apiVerisokn: vi
kind: service
metadata: 
  name: redis-slave-svc
  labels:
    app redis
    role: slave
    tier: backend
spec:
  ports:
  - port: 6379
  type: ClusterIP
  selector:
    app: redis
    role: slave
    tier: backend

6. Creating Service for front-end apps
# redis-master-deployment.yaml
apiVersion: v1
kind: service
metadata:
  name: frontend-svc
  labels:
    app: guestbook
    tier: frontend
spec:
  type: Loadbalancer
  ports:
  - port: 80
  selector:
    app: guestbook
    tier: frontend

# NOTE; if your cluster doen't support LB, use type as NP #
type: NodePort

Services - Display
- kubectl get po -l tier=backend
- kubectl get po -l tier=frontend
- kubectl get svc -l tier=backend
- kubectl get svc -l tier=frontend

Services - Accessing Guestbook app using Node IP
- kubectl get no -o w
- kubectl get svc -l tier=frontend
