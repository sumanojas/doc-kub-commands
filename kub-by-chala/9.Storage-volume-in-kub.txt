Think time...
. how can data persist through-out lifecycle of pod ?
. How can data persist beyond lifecycle of pod ?
. How can containers share files between containers in pod?

volume - overview
. pods are ephemeral and stateless intially
. volumes bring persistence to pods
. Adv of kubernetes volujmes vs. Docker volumes
 .kubernetes volumes are much more mature than docker volumes
  . Container(s) has access to volume
  . In kubernetes Volumes are associated with Lifecycle of pod
  . where as in docker volumes are associated with Lifecycle of a containers.
  . difference is when the containers get restarted in docker, data inside the volumes will be erased & where as in pod data is preserved across the container restart  
  . Supports many types of volumes
  . over all kubernetes volumes are much more mature & robost when compared to docker volumes
volumes types:--
. volume:- is a directory possible with some data init & which is accesible to the containers in a pod

          	 volumes types
                       |
		       |
       ________________|______________
       |			      |
       |			      |
       | 			      |
  Ephemeral			  Durable
same lifetime as pods         Beyond pods lifetime


=>emptyDir:-
. creates empty directory first created when a pod is assigned to a Node.
. stays as long as pod is running 
. once pod is removed from a node, emptyDir is deleted forever
use cases:
 . temporary space

emptyDir - Config
# test-ed.yaml
apiVersion: v1
kind: Pod
metadata:
  name: test-ed
spec:
  containers:
  - image: k8s.gcr.io/test-webserver
    name: test-container
    volumeMounts:
    - name: cache-volume
      mountPath: /cache
  volumes:
  - name: cache-volume
    emptyDir: {}

emptyDir - Create & Display
- kubectl create -f test-ed.yaml
- kubectl get po
- kubectl exec test-ed df /cache
emptyDir - Describe
- kubectl describe pod test-ed
emptyDir - Delete
- kubectl delete po test-ed

=>hostPath:--
. mounts a file or directory from the host node's filesystem into your Pod
. remains even after the pod is terminated
. similar to docker volume
. use cautiously when required
. host issues might cause problem to hostPath

hostPath - Config
# HostPath
apiVersion: v1
kind: Pod
metadata:
  name: redis-hostpath
spec:
  containers:
    - name: redis-containers
      image: redis
      volumeMounts:
      - mountPath: /test-mnt
        name: test-vol
  volumes:
  - name: test-vol
    hostPath:
      path: /test-vol

HostPath - Create & Display
- kubectl create -f redis-hostpath.yaml
- kubectl get po
- kubectl exec redis-hostpath df /test-mnt

HostPath - From Host to Pod

Host(node2):
----------- 
# cd /test-vol
# echo "From Host" > from-host.txt
# cat from-host.txt

Pod:
----
- kubectl exec redis-hostpath cat /test-mnt/from-host.txt

=>gcePersistentDisk:--
. volume mounts a Google Compute Engine (GCE) Persistent Disk into Pod
. volume data is persisted pods termination
. Read-Write only on one node and Read-Write on many nodes
Restrictions:
. you must create a PD using gcloud or the GCE API or UI before you can use it
. the nodes on which Pods are running must be GCE VMs
. those VMs need to be in the same GCE project and zone as the PD

gcePersistentDisk - Create Disk
- gcloud compute disks create --size=10GB --zone=us-central1-a my-data-disk

gcePersistentDisk - Config
# gcePersistentDisk
apiVersion: v1
kind: Pod
metadata:
  name: gce-pd
spec:
  containers:
  - name: test-container
    image: nginx
    volumeMounts:
    - mountPath: /test-pd
      name: test-volume
  volumes:
  - name: test-volume
    gcePersistentDisk:
      pdName: my-data-disk
      fsType: ext4

gcePersistentDisk - Create & Display
- kubectl create -f test-gcepd.yaml
- kubectl get po -o wide

gcePersistentDisk - Describe
- kubectl describe po gce-pd

gcePersistentDisk - Testing
- kubectl exec gce-pd -it -- /bin/sh
# df
# echo "Testing - 1" > /test-ed/test1.html
# exit
- kubectl delete -f gce-pd.yaml

gcePersistentDisk - config create
- kubectl create -f test-gcepd.yaml
- kubectl get po -o wide

gcePersistentDisk - Testing
- kubectl exec gce-pd df /test-pd
- kubectl exec gce-pd ls /test-pd/
- kubectl exec gce-pd cat /test-pd/test1.html
