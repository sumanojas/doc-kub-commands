What is Docker ?
----------------------------------------------------------------
Docker is the worldâ€™s leading software container platform
Docker makes the process of application deployment very easy and efficient and resolves a lot of issues related to deploying applications

Docker is a tool designed to make it easier to deploy and run applications by using containers

Docker gives you a standard way of packaging your application with all its dependencies in a container

Containers allow a developer to package up an application with all of the parts it needs, such as libraries and other dependencies, and ship it all out as one package. 


What are Images
-----------------------------------------------------------------
Docker Images are templates used to create Docker containers
Container is a running instance of image

Where are Images Stored
Registries (e.g. docker hub)
Can be stored locally or remote

What are Containers:
-----------------------------------------------------------------
Containers are running instances of Docker Images

A container image is a lightweight, stand-alone, executable package of a piece of software that includes everything needed to run it: code, runtime, system tools, system libraries, settings.


Features of Containers:
------------------------------------------
Are lightweight

Fewer resources are used

Booting of containers is very fast

Can start, stop, kill, remove containers easily and quickly

Operating System resources can be shared within Docker

Containers run on the same machine sharing the same Operating system Kernel, this makes it faster


Dockerfile : 
-------------------------------------------------
A text file with instructions to build image
Automation of Docker Image Creation

FROM
RUN
CMD

Step 1 : Create a file named Dockerfile

Step 2 : Add instructions in Dockerfile

Step 3 : Build dockerfile to create image

Step 4 : Run image to create container


sample Dockerfile
--------------------------------------
FROM ubuntu

RUN apt-get update

CMD ["echo", "Hello World"]

COMMANDS

: docker build -t ImageName:Tag directoryOfDocekrfile

: docker run <image iname>


Create container from our own custom image
----------------------------------------------
1. dockr run --name ramcontainer -it ubuntu //bin/bash
2. create a file by inside container 
3. create image from container by using below command
   ( docker commit <cont id> <imagename>:tag )
4. now check the images
5. create container from our image
   ( docker run -it --name ranjitcontainer <custom image> //bin/bash 
6. now go and check inside ranjit container the file will be available


Docker compose
-------------------------------------------------
: tool for defining & running multi-container docker applications
: use yaml files to configure application services (docker-compose.yml)
: can start all services with a single command : docker compose up
: can stop all services with a single command : docker compose down
: can scale up selected services when required


Install Compose on Linux systems
---------------------------------------------------------
step 1:
-------
1.Run this command to download the current stable release of Docker Compose:
 (sudo curl -L "https://github.com/docker/compose/releases/download/1.27.4/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose)

2.Apply executable permissions to the binary:
 (sudo chmod +x /usr/local/bin/docker-compose)

3.Test the installation
 (docker-compose --version)

step 2: 
-------
Create docker compose file at any Location on your system with name of docker-compose.yml 
[vi docker-compose.yml]
---
version: '3'
services:
  database:
    image: redis
  web:
    image: nginx
    ports:
    - published: 9090
      target: 80



Step 3 : 
--------
Check the validity of file by command
   [docker-compose config]

Step 4 :
-------- 
Run docker-compose.yml file by command
   [docker-compose up -d]

Step 5 :
---------
Bring down application by command
   [docker-compose down]

Step 6 :
--------
scale services
   [docker-compose up -d --scale database=4]

step 7 :
---------
check the docker-compose commands
   [docker-compose --help]


Volumes ?
----------
Volumes are the preferred mechanism for persisting data generated by and used by Docker containers.

Use of Volumes
===========
Decoupling container from storage
Share volume (storage/data) among different containers
Attach volume to container
On deleting container volume does not delete

1.check docker volume commands
[docker volume --help]

2.docker volume create myvol1
3.docker volume ls
4.docker volume inspect <volume name>
5.docker volume rm
6.docker volume prune


run jenkins in a container to use the volume concept
-------------------------------------------------------
docker run --name MyJenkins1 -v myvol1:/var/jenkins_home -p 8080:8080 -p 50000:50000 jenkins/jenkins:lts
docker run --name MyJenkins2 -v myvol1:/var/jenkins_home -p 9090:8080 -p 60000:50000 jenkins/jenkins:lts





   





